18.4.13
1. create thread.c and add necessary things into MAKEFILE
2.  int threads;                 // Counts number of threads. If it is LWP, it will be set to 0. Check main thread for accurate number.
	struct proc *pthread;        // Points to main thread. pthread = myproc() means itself is main thread.
	struct proc *cthread[NPROC]; // Only main thread will take care of this array. Has direct access to all threads under the process.
	char *ustack;                // Bottom of kernel stack for this process. Will only be used if it is LWP.
		to proc structure.
3.	make thread_create based on fork() & exec()
4. 	removed static from allocproc() from proc.c to be used in thread.c
5.  Make sure main thread is only process that is under influence of  stride scheduler. (proc.c & trap.c)
	Threads under process will be chosen by main thread via round robin.
	If set_cpu_share() is called from thread, it will set the main thread's cpu share.
	NOTICE that if it is not stride, threads also will be influenced by MLFQ.
	First attemption was to remove threads all from the MLFQ scheduler, but if so, the performance of multi threading is not garanteed.

18.4.14
1. Create thread_exit()
2. remove static from wakeup1 so it can be used from thread.c
